[{"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/index.js":"1","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/App.js":"2","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/reportWebVitals.js":"3","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/routes.js":"4","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/home/index.js":"5","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/header/index.js":"6","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/auth/register/index.js":"7","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/auth/login/index.js":"8","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/notes/index/index.js":"9","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/users/edit/index.js":"10","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/private_route/index.js":"11","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/register_form/index.js":"12","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/login_form/index.js":"13","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/header_logged/index.js":"14","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/index.js":"15","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_edit_form/index.js":"16","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_edit_password_form/index.js":"17","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_delete/index.js":"18","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/users.js":"19","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/notes.js":"20","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/list/index.js":"21","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/search/index.js":"22","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/editor/index.js":"23","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/api.js":"24"},{"size":500,"mtime":1629396312417,"results":"25","hashOfConfig":"26"},{"size":306,"mtime":1629399622377,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1629396312417,"results":"28","hashOfConfig":"26"},{"size":840,"mtime":1629471282424,"results":"29","hashOfConfig":"26"},{"size":1148,"mtime":1630441467185,"results":"30","hashOfConfig":"26"},{"size":1330,"mtime":1629832701866,"results":"31","hashOfConfig":"26"},{"size":1370,"mtime":1629832505962,"results":"32","hashOfConfig":"26"},{"size":1284,"mtime":1629832492947,"results":"33","hashOfConfig":"26"},{"size":479,"mtime":1629832529880,"results":"34","hashOfConfig":"26"},{"size":1569,"mtime":1629832549214,"results":"35","hashOfConfig":"26"},{"size":329,"mtime":1629832252565,"results":"36","hashOfConfig":"26"},{"size":2771,"mtime":1629832316011,"results":"37","hashOfConfig":"26"},{"size":2510,"mtime":1629832232123,"results":"38","hashOfConfig":"26"},{"size":2796,"mtime":1629832357934,"results":"39","hashOfConfig":"26"},{"size":2587,"mtime":1629832411353,"results":"40","hashOfConfig":"26"},{"size":2066,"mtime":1629832440913,"results":"41","hashOfConfig":"26"},{"size":2227,"mtime":1629832454140,"results":"42","hashOfConfig":"26"},{"size":644,"mtime":1629832425585,"results":"43","hashOfConfig":"26"},{"size":1081,"mtime":1629832591213,"results":"44","hashOfConfig":"26"},{"size":720,"mtime":1629832579923,"results":"45","hashOfConfig":"26"},{"size":1751,"mtime":1629832385625,"results":"46","hashOfConfig":"26"},{"size":1074,"mtime":1629832397705,"results":"47","hashOfConfig":"26"},{"size":1219,"mtime":1629832372441,"results":"48","hashOfConfig":"26"},{"size":116,"mtime":1629833455162,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"gqqumq",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/index.js",[],["114","115"],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/App.js",["116","117","118","119"],"import React, { Fragment } from 'react';\nimport \"./App.scss\";\nimport { Notification, Section } from 'rbx';\nimport Header from './components/header';\nimport HomeScreen from './screens/home';\nimport Routes from './routes'\n \nconst App = () => (\n  <Fragment>\n    <Routes/>\n  </Fragment>\n)\n \nexport default App;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/reportWebVitals.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/routes.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/home/index.js",["120"],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/header/index.js",["121","122"],"import React, {useState} from 'react';\nimport { Navbar, Container, Column } from 'rbx';\nimport logoImage from '../../assets/images/logo.png';\nimport '../../styles/header.scss';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n  return(\n    <Navbar>\n      <Container>\n        <Navbar.Brand>\n          <Link to=\"/\">\n            <img src={logoImage} />\n          </Link>\n          <Navbar.Burger\n            className=\"navbar-burger burger\" \n            aria-label=\"menu\" \n            aria-expanded=\"false\" \n            data-target=\"navbar-menu\">\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </Navbar.Burger>\n        </Navbar.Brand>\n\n        <Navbar.Menu id=\"navbar-menu\">\n          <Navbar.Segment as=\"div\" className=\"navbar-item navbar-end\" align=\"right\">\n            <Column.Group>\n              <Column>\n                <Link to=\"/register\" className=\"button is-white has-text-custom-purple\">Register</Link>\n              </Column>\n              <Column>\n                <Link to=\"/login\" className=\"button is-outlined is-custom-purple\">Login</Link>\n              </Column>\n            </Column.Group>\n          </Navbar.Segment>\n        </Navbar.Menu>\n      </Container>\n    </Navbar>\n  )\n}\n\nexport default Header;\n","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/auth/register/index.js",["123"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from \"rbx\";\nimport logoImage from '../../../assets/images/logo.png';\nimport \"../../../styles/auth.scss\";\nimport RegisterForm from '../../../components/auth/register_form';\n\n\n\nconst RegisterScreen = () => (\n    <Fragment>\n      <Header />\n      <Section size=\"medium\" className=\"auth\">\n        <Container>\n          <Column.Group centered>\n            <Column size={3}>\n              <Card>\n                <Card.Content>\n                  <Section>\n                    <Column.Group centered>\n                      <Column size={12}>\n                        <img src={logoImage} />\n                      </Column>\n                    </Column.Group>\n  \n                    <Column.Group>\n                      <Column size={12}>\n                        <Title size={6} className=\"has-text-grey has-text-centered\">\n                          Your notes on the cloud\n                        </Title>\n                      </Column>\n                    </Column.Group>\n                    <RegisterForm/>\n                  </Section>\n  \n                </Card.Content>\n              </Card>\n            </Column>\n          </Column.Group>\n        </Container>\n      </Section>\n    </Fragment>\n  );\n  \n  export default RegisterScreen;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/auth/login/index.js",["124"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from \"rbx\";\nimport logoImage from '../../../assets/images/logo.png';\nimport \"../../../styles/auth.scss\";\nimport LoginForm from '../../../components/auth/login_form';\n\n\nconst LoginScreen = () => (\n  <Fragment>\n    <Header />\n    <Section size=\"medium\" className=\"auth\">\n      <Container>\n        <Column.Group centered>\n          <Column size={3}>\n            <Card>\n              <Card.Content>\n                <Section>\n                  <Column.Group centered>\n                    <Column size={12}>\n                      <img src={logoImage} />\n                    </Column>\n                  </Column.Group>\n\n                  <Column.Group>\n                    <Column size={12}>\n                      <Title size={6} className=\"has-text-grey has-text-centered\">\n                        Your notes on the cloud\n                      </Title>\n                    </Column>\n                  </Column.Group>\n                  <LoginForm/>\n                </Section>\n\n              </Card.Content>\n            </Card>\n          </Column>\n        </Column.Group>\n      </Container>\n    </Section>\n  </Fragment>\n);\n\nexport default LoginScreen;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/notes/index/index.js",["125"],"import React, { Fragment, useState } from 'react';\nimport HeaderLogged from \"../../../components/header_logged\";\nimport { Column } from \"rbx\";\nimport \"../../../styles/notes.scss\";\n\nimport Notes from \"../../../components/notes\";\n\n\n\nconst NotesScreen = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  return(\n    <Fragment>\n      <HeaderLogged setIsOpen={setIsOpen}/>\n      <Notes setIsOpen={setIsOpen} isOpen={isOpen} />\n    </Fragment>\n  );\n}\nexport default NotesScreen;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/screens/users/edit/index.js",["126"],"import React, { Fragment } from 'react';\nimport { Column, Section, Title, Container, Card, Button } from \"rbx\";\nimport \"../../../styles/users.scss\";\nimport UsersEditForm from \"../../../components/users/user_edit_form\";\nimport UsersEditPasswordForm from \"../../../components/users/user_edit_password_form\";\nimport UsersDelete from \"../../../components/users/user_delete\";\nimport HeaderLogged from \"../../../components/header_logged\";\n\n\nconst UserEditScreen = () => (\n  <Fragment>\n    <HeaderLogged />\n    <Section size=\"medium\" className=\"users\">\n      <Container>\n        <Column.Group centered className=\"users-edit\">\n          <Column size={4}>\n            <Title size={5} className=\"has-text-grey has-text-left\">\n              Informações Pessoais\n            </Title>\n            <Card>\n              <Card.Content>\n                <UsersEditForm/>\n              </Card.Content>\n            </Card>\n          </Column>\n        </Column.Group>\n\n        <Column.Group centered className=\"users-edit\">\n          <Column size={4}>\n            <Title size={5} className=\"has-text-grey has-text-left\">\n              Password\n            </Title>\n            <Card>\n              <Card.Content>\n                <UsersEditPasswordForm/>\n              </Card.Content>\n            </Card>\n          </Column>\n        </Column.Group>\n        <Column.Group centered>\n          <Column size={4} className=\"has-text-right\">\n            <UsersDelete/>\n          </Column>\n        </Column.Group>\n      </Container>\n    </Section>\n  </Fragment>\n);\n\nexport default UserEditScreen;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/private_route/index.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/register_form/index.js",["127","128","129"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\n\n\nfunction RegisterForm() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [redirectToLogin, setRedirectToLogin] = useState(false);\n  const [error, setError] = useState(false);\n\n  const HandleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      const user = await UsersService.register({name: name,email: email,password: password});\n      setRedirectToLogin(true);\n    } catch (error) {\n      setError(true);\n    }\n  }\n\n\n  if(redirectToLogin)\n    return <Redirect to={{pathname: \"/login\"}}/>\n\n  return (\n    <Fragment>\n      <Column.Group centered>\n        <form onSubmit={HandleSubmit}>\n          <Column size={12}>\n            <Field>\n              <Label size=\"small\">Name:</Label>\n              <Control>\n                <Input\n                  type=\"name\"\n                  required\n                  name=\"name\"\n                  value={name}\n                  onChange={e => setName(e.target.value)}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Label size=\"small\">Email:</Label>\n              <Control>\n                <Input \n                  type=\"email\" \n                  required\n                  name=\"email\"\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Label size=\"small\">Password:</Label>\n              <Control>\n                <Input \n                  type=\"password\" \n                  required\n                  name=\"password\"\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Control>\n                <Column.Group breakpoint=\"mobile\">\n                  <Column>\n                    <a className=\"button is-white has-text-custom-purple\"\n                       onClick={e => setRedirectToLogin(true)}\n                    >Login or</a>\n                  </Column>\n                  <Column>\n                    <Button color=\"custom-purple\" outlined>Register</Button>\n                  </Column>\n                </Column.Group>\n              </Control>\n            </Field>\n            { error && <Help color=\"danger\">Email or Password invalid</Help> }\n          </Column>\n        </form>\n      </Column.Group>\n    </Fragment>\n  )\n}\n\nexport default RegisterForm;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/auth/login_form/index.js",["130","131","132"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\n\nfunction LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [redirectToRegister, setRedirectToRegister] = useState(false);\n  const [redirectToNotes, setRedirectToNotes] = useState(false);\n  const [error, setError] = useState(false);\n\n\n  const HandleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      const user = await UsersService.login({email: email,password: password});\n      setRedirectToNotes(true);\n    } catch (error) {\n      setError(true);\n    }\n  }\n\n  if(redirectToRegister)\n    return <Redirect to={{pathname: \"/register\"}}/>\n  else if(redirectToNotes)\n    return <Redirect to={{pathname: \"/notes\"}}/>\n\n  return (\n    <Fragment>\n      <Column.Group centered>\n        <form onSubmit={HandleSubmit}>\n          <Column size={12}>\n            <Field>\n              <Label size=\"small\">Email:</Label>\n              <Control>\n                <Input \n                  type=\"email\" \n                  required\n                  name=\"email\"\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Label size=\"small\">Password:</Label>\n              <Control>\n                <Input \n                  type=\"password\" \n                  required\n                  name=\"password\"\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </Control>\n            </Field>\n            <Field>\n              <Control>\n                <Column.Group breakpoint=\"mobile\">\n                  <Column>\n                    <a className=\"button is-white has-text-custom-purple\"\n                       onClick={e => setRedirectToRegister(true)}\n                    >Register or</a>\n                  </Column>\n                  <Column>\n                    <Button color=\"custom-purple\" outlined>Login</Button>\n                  </Column>\n                </Column.Group>\n              </Control>\n            </Field>\n            { error && <Help color=\"danger\">Email or Password invalid</Help> }\n          </Column>\n        </form>\n      </Column.Group>\n    </Fragment>\n  )\n}\n\nexport default LoginForm;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/header_logged/index.js",["133","134","135","136","137","138"],"import React, { Fragment, useState } from 'react';\nimport { Navbar, Container, Column, Button, Dropdown } from 'rbx';\nimport logoImage from '../../assets/images/logo-white.png';\nimport \"../../styles/header.scss\";\nimport UsersService from '../../services/users';\nimport { Redirect, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faList } from '@fortawesome/free-solid-svg-icons'\n\n\nfunction HeaderLogged(props) {\n  const [redirectToHome, setRedirectToHome] = useState(false);\n  const [user, setUser] = useState(localStorage.getItem('user'));\n    \n  const logOut = async () => {\n    await UsersService.logout();\n    setRedirectToHome(true);\n  }\n\n  if (redirectToHome == true)\n    return <Redirect to={{ pathname: \"/\" }} />\n\n  return (\n    <Navbar color=\"custom-purple\" className=\"navbar-logged\">\n      <Navbar.Brand>\n        <Column.Group>\n          <Column size=\"11\" offset=\"1\">\n            <Link to=\"/notes\">\n              <img src={logoImage} />\n            </Link>\n          </Column>\n        </Column.Group>\n        <Navbar.Burger\n          className=\"navbar-burger burger\" \n          aria-label=\"menu\" \n          aria-expanded=\"false\" \n          data-target=\"navbar-menu\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </Navbar.Burger>\n      </Navbar.Brand>\n\n      <Navbar.Menu>\n        <Navbar.Segment as=\"div\" className=\"navbar-item navbar-start\" align=\"start\">\n          <Navbar.Item as=\"div\">\n            <Button \n              className=\"open-button\" \n              color=\"white\" \n              outlined\n              onClick={() => props.setIsOpen(true)}>\n              <FontAwesomeIcon icon={faList} />\n            </Button>\n          </Navbar.Item>\n        </Navbar.Segment>\n        <Navbar.Segment as=\"div\" className=\"navbar-item navbar-end\" align=\"right\">\n          <Navbar.Item as=\"div\">\n            <Dropdown>\n              <Dropdown.Trigger>\n                <Button className=\"button\" color=\"white\" outlined>\n                  <span>{JSON.parse(user)['name']} ▼</span>\n                </Button>\n              </Dropdown.Trigger>\n              <Dropdown.Menu>\n                <Dropdown.Content>\n                  <Dropdown.Item as=\"div\">\n                    <Link to=\"/users/edit\">User Edit</Link>\n                  </Dropdown.Item>\n                  <Dropdown.Divider />\n                  <Dropdown.Item as=\"div\">\n                    <a href=\"#\" onClick={e => logOut()}>LogOut</a>\n                  </Dropdown.Item>\n                </Dropdown.Content>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Navbar.Item>\n        </Navbar.Segment>\n      </Navbar.Menu>\n    </Navbar>\n  )\n}\n\nexport default HeaderLogged;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/index.js",["139","140"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Column, Button } from \"rbx\";\nimport \"../../styles/notes.scss\";\nimport { push as Menu } from 'react-burger-menu';\nimport List from \"../../components/notes/list\";\nimport NotesService from '../../services/notes';\nimport Editor from \"../notes/editor\";\nimport Search from '../notes/search';\n\n\nfunction Notes(props) {\n  const [notes, setNotes] = useState([]);\n  const [current_note, setCurrentNote] = useState({ title: \"\", body: \"\", id: \"\" });\n\n  async function fetchNotes() {\n    const response = await NotesService.index();\n    if (response.data.length >= 1) {\n      setNotes(response.data.reverse())\n      setCurrentNote(response.data[0])\n    } else {\n      setNotes([]);\n    }\n  }\n\n  const createNote = async () => {\n    await NotesService.create();\n    fetchNotes();\n  }\n\n  const deleteNote = async (note) => {\n    await NotesService.delete(note._id);\n    fetchNotes();\n  }\n\n  const updateNote = async (oldNote, params) => {\n    const updatedNote = await NotesService.update(oldNote._id, params);\n    const index = notes.indexOf(oldNote);\n    const newNotes = notes;\n    newNotes[index] = updatedNote.data;\n    setNotes(newNotes);\n    setCurrentNote(updatedNote.data);\n  }\n\n  const searchNotes = async (query) => {\n    const response = await NotesService.search(query);\n    setNotes(response.data);\n  }\n\n  const selectNote = (id) => {\n    const note = notes.find((note) => {\n      return note._id == id;\n    })\n    setCurrentNote(note);\n  }\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  return (\n    <Fragment>\n      <Column.Group className=\"notes\" id=\"notes\">\n        <Menu\n          pageWrapId={\"notes-editor\"}\n          isOpen={props.isOpen}\n          onStateChange={(state) => props.setIsOpen(state.isOpen)}\n          disableAutoFocus\n          outerContainerId={\"notes\"}\n          customBurgerIcon={false}\n          customCrossIcon={false}\n        >\n          <Column.Group>\n            <Column size={10} offset={1}>\n              <Search searchNotes={searchNotes} fetchNotes={fetchNotes}/>\n            </Column>\n          </Column.Group>\n          <List\n            notes={notes}\n            selectNote={selectNote}\n            current_note={current_note} \n            deleteNote={deleteNote}\n            createNote={createNote}/>\n        </Menu>\n\n\n        <Column size={12} className=\"notes-editor\" id=\"notes-editor\">\n          <Editor \n            note={current_note}\n            updateNote={updateNote}  \n          />\n        </Column>\n      </Column.Group>\n    </Fragment>\n  )\n}\n\nexport default Notes;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_edit_form/index.js",["141","142","143"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\n\nimport UsersService from '../../../services/users';\n\n\nfunction UsersEditForm() {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [status, setStatus] = useState(null);\n\n  const initializeUser = async () => {\n    const user = await JSON.parse(localStorage.getItem('user'));\n    setName(user['name']);\n    setEmail(user['email']);\n  }\n\n  useEffect(() =>{\n    initializeUser()    \n  }, [])\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    try {\n      await UsersService.update({ email: email, name: name });\n      setStatus(\"success\")\n    } catch (err) {\n      setStatus(\"error\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Full Name</Label>\n            <Input\n              type=\"name\"\n              value={name || \"\"}\n              onChange={e => setName(e.target.value)}\n              required\n              name=\"name\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Email</Label>\n            <Input\n              type=\"email\"\n              value={email || \"\"}\n              onChange={e => setEmail(e.target.value)}\n              required\n              name=\"email\"\n            />\n          </Control>\n        </Field>\n\n        <Field>\n          <Control>\n            <Column.Group>\n              <Column className=\"has-text-right\">\n                <Button color=\"custom-purple\" outlined>Update</Button>\n              </Column>\n            </Column.Group>\n          </Control>\n        </Field>\n        {status == \"error\" &&\n          <Help color=\"danger\">Problem in update</Help>\n        }\n        {status == \"success\" &&\n          <Help color=\"primary\">Updated with success</Help>\n        }\n      </form>\n    </Fragment>\n  )\n\n\n}\n\nexport default UsersEditForm;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_edit_password_form/index.js",["144","145","146","147","148"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\n\nimport UsersService from '../../../services/users';\n\n\nfunction UsersEditFormPassword() {\n  const [password, setPassword] = useState(\"\");\n  const [password_confirmation, setPasswordConfirmation] = useState(\"\");\n  const [status, setStatus] = useState(null);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    if(password == password_confirmation){\n      try {\n        await UsersService.updatePassword({ password: password });\n        setStatus(\"success\")\n      } catch (err) {\n        setStatus(\"error\")\n      }\n    } else{\n      setStatus(\"error_confirmation_password\")\n    }\n\n  }\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password</Label>\n            <Input\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              required\n              name=\"password\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password Confirmation</Label>\n            <Input\n              type=\"password\"\n              value={password_confirmation}\n              onChange={e => setPasswordConfirmation(e.target.value)}\n              required\n              name=\"password_confirmation\"\n            />\n          </Control>\n        </Field>\n\n        <Field>\n          <Control>\n            <Column.Group>\n              <Column className=\"has-text-right\">\n                <Button color=\"custom-purple\" outlined>Update Password</Button>\n              </Column>\n            </Column.Group>\n          </Control>\n        </Field>\n        {status == \"error_update\" &&\n          <Help color=\"danger\">Problem in password update</Help>\n        }\n        {status == \"error_confirmation_password\" &&\n          <Help color=\"danger\">Password don't match</Help>\n        }\n        {status == \"success\" &&\n          <Help color=\"primary\">Updated with success</Help>\n        }\n      </form>\n    </Fragment>\n  )\n}\n\nexport default UsersEditFormPassword;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/users/user_delete/index.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/users.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/notes.js",[],"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/list/index.js",["149"],"import React, { Fragment } from 'react';\nimport { Button, Column, Tag, Title, List } from \"rbx\";\nimport Moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\n\nfunction ListNotes(props) {\n  return (\n    <Fragment>\n      <Column.Group breakpoint=\"mobile\">\n        <Column size={6} offset={1}>\n          <Title size={6}>\n            {props.notes.length} Notes\n          </Title>\n        </Column>\n        <Column size={2}>\n          <Button state=\"active\" color=\"custom-purple\" outlined size=\"small\" onClick={() => props.createNote()}>\n            Notes +\n          </Button>\n        </Column>\n      </Column.Group>\n      <List className=\"notes-list\">\n        {props.notes.map((item, key) =>\n          <List.Item key={key} onClick={() => props.selectNote(item._id)} active={item == props.current_note}>\n            <Title size={6}>\n              {item.title.replace(/(<([^>]+)>)/ig, \"\").substring(0,15)}\n            </Title>\n            <Title size={6} subtitle spaced={false}>\n              {item.body.replace(/(<([^>]+)>)/ig, \"\").substring(0,30)}\n            </Title>\n            \n            <Column.Group breakpoint=\"mobile\">\n              <Column size={10}>\n                <Tag color=\"dark\">\n                  {Moment(item.created_at).format('DD/MM')}\n                </Tag>\n              </Column>\n              <Column size={2}>\n                <FontAwesomeIcon \n                  icon={faTrash} \n                  onClick={() => props.deleteNote(item)}\n                  color=\"grey\"\n                />\n              </Column>\n            </Column.Group>\n          </List.Item>\n        )}\n      </List>\n    </Fragment>\n  )\n}\n\nexport default ListNotes;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/search/index.js",["150","151","152"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Input, Column } from \"rbx\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nfunction Search(props) {\n  const [query, setQuery] = useState(\"\")\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      props.searchNotes(query)\n    }\n  }\n\n  return (\n    <Column.Group className=\"is-vcentered\" breakpoint=\"mobile\">\n      <Column size=\"9\" offset={1}>\n        <Input type=\"text\"\n          name={query}\n          value={query}\n          placeholder=\"Search note...\"\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown} />\n      </Column>\n      <Column mobile={2} size={1}>\n        <a href=\"#\" onClick={() => {\n          props.fetchNotes()\n          setQuery('')\n        }}>\n          <FontAwesomeIcon\n            icon={faTimes}\n            color=\"grey\"\n            className=\"is-pulled-left  \"\n          />\n        </a>\n      </Column>\n    </Column.Group>\n  )\n}\n\nexport default Search;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/editor/index.js",["153"],"import React, { Fragment, useState, useEffect } from 'react';\n\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nfunction Editor(props) {\n  const [currentContent, setCurrentContent] = useState('');\n  const [timer, setTimer] = useState(null);\n\n  const updateNote = (content) => {\n    const title = content.replace(/(<([^>]+)>)/ig, \"\").slice(0, 30);\n    props.updateNote(props.note, {'title': title, 'body': content});\n  }\n\n  const handleChange = (content, delta, source) => {\n    clearTimeout(timer);\n    if(source == 'user'){\n      setCurrentContent(content);\n      setTimer(setTimeout(() => updateNote(content), 2000))\n    }\n  }\n\n\n  useEffect(()=> {\n    setCurrentContent(props.note.body)\n  }, [props.note])\n\n  const modules = {\n    toolbar: [\n      [{ 'header': '1'}, {'header': '2'}, { 'font': [] }],\n      ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block'],\n      [{'list': 'ordered'}, {'list': 'bullet'}, \n       {'indent': '-1'}, {'indent': '+1'}],\n      ['link'],\n      ['clean'],\n    ]\n  }\n\n  return (\n    <Fragment>\n      <ReactQuill value={currentContent} modules={modules} onChange={handleChange}/>\n    </Fragment>\n  )\n}\n\nexport default Editor;","/home/guilherme/workfolder/Evernote2/jsnotes-client/src/services/api.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":22},{"ruleId":"158","severity":1,"message":"162","line":3,"column":24,"nodeType":"160","messageId":"161","endLine":3,"endColumn":31},{"ruleId":"158","severity":1,"message":"163","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":14},{"ruleId":"158","severity":1,"message":"164","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":27,"column":13,"nodeType":"167","endLine":27,"endColumn":43},{"ruleId":"158","severity":1,"message":"168","line":1,"column":16,"nodeType":"160","messageId":"161","endLine":1,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":13,"column":13,"nodeType":"167","endLine":13,"endColumn":36},{"ruleId":"165","severity":1,"message":"166","line":22,"column":25,"nodeType":"167","endLine":22,"endColumn":48},{"ruleId":"165","severity":1,"message":"166","line":21,"column":23,"nodeType":"167","endLine":21,"endColumn":46},{"ruleId":"158","severity":1,"message":"169","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":16},{"ruleId":"158","severity":1,"message":"170","line":2,"column":51,"nodeType":"160","messageId":"161","endLine":2,"endColumn":57},{"ruleId":"158","severity":1,"message":"162","line":2,"column":49,"nodeType":"160","messageId":"161","endLine":2,"endColumn":56},{"ruleId":"158","severity":1,"message":"171","line":18,"column":13,"nodeType":"160","messageId":"161","endLine":18,"endColumn":17},{"ruleId":"172","severity":1,"message":"173","line":74,"column":21,"nodeType":"167","endLine":76,"endColumn":22},{"ruleId":"158","severity":1,"message":"162","line":2,"column":49,"nodeType":"160","messageId":"161","endLine":2,"endColumn":56},{"ruleId":"158","severity":1,"message":"171","line":18,"column":13,"nodeType":"160","messageId":"161","endLine":18,"endColumn":17},{"ruleId":"172","severity":1,"message":"173","line":63,"column":21,"nodeType":"167","endLine":65,"endColumn":22},{"ruleId":"158","severity":1,"message":"174","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"175","line":2,"column":18,"nodeType":"160","messageId":"161","endLine":2,"endColumn":27},{"ruleId":"158","severity":1,"message":"176","line":13,"column":16,"nodeType":"160","messageId":"161","endLine":13,"endColumn":23},{"ruleId":"177","severity":1,"message":"178","line":20,"column":22,"nodeType":"179","messageId":"180","endLine":20,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":29,"column":15,"nodeType":"167","endLine":29,"endColumn":38},{"ruleId":"172","severity":1,"message":"181","line":71,"column":21,"nodeType":"167","endLine":71,"endColumn":57},{"ruleId":"158","severity":1,"message":"170","line":2,"column":18,"nodeType":"160","messageId":"161","endLine":2,"endColumn":24},{"ruleId":"177","severity":1,"message":"178","line":51,"column":23,"nodeType":"179","messageId":"180","endLine":51,"endColumn":25},{"ruleId":"158","severity":1,"message":"182","line":2,"column":49,"nodeType":"160","messageId":"161","endLine":2,"endColumn":54},{"ruleId":"177","severity":1,"message":"178","line":70,"column":17,"nodeType":"179","messageId":"180","endLine":70,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":73,"column":17,"nodeType":"179","messageId":"180","endLine":73,"endColumn":19},{"ruleId":"158","severity":1,"message":"182","line":2,"column":49,"nodeType":"160","messageId":"161","endLine":2,"endColumn":54},{"ruleId":"177","severity":1,"message":"178","line":15,"column":17,"nodeType":"179","messageId":"180","endLine":15,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":65,"column":17,"nodeType":"179","messageId":"180","endLine":65,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":68,"column":17,"nodeType":"179","messageId":"180","endLine":68,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":71,"column":17,"nodeType":"179","messageId":"180","endLine":71,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":25,"column":88,"nodeType":"179","messageId":"180","endLine":25,"endColumn":90},{"ruleId":"158","severity":1,"message":"174","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"183","line":1,"column":37,"nodeType":"160","messageId":"161","endLine":1,"endColumn":46},{"ruleId":"172","severity":1,"message":"181","line":26,"column":9,"nodeType":"167","endLine":29,"endColumn":12},{"ruleId":"177","severity":1,"message":"178","line":17,"column":15,"nodeType":"179","messageId":"180","endLine":17,"endColumn":17},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'Notification' is defined but never used.","Identifier","unusedVar","'Section' is defined but never used.","'Header' is defined but never used.","'HomeScreen' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'Column' is defined but never used.","'Button' is defined but never used.","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Fragment' is defined but never used.","'Container' is defined but never used.","'setUser' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Title' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]