{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Column, Button } from \"rbx\";\nimport \"../../styles/notes.scss\";\nimport { push as Menu } from 'react-burger-menu';\nimport List from \"../../components/notes/list\";\nimport NotesService from '../../services/notes';\nimport Editor from \"../notes/editor\";\nimport Search from '../notes/search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Notes(props) {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [current_note, setCurrentNote] = useState({\n    title: \"\",\n    body: \"\",\n    id: \"\"\n  });\n\n  async function fetchNotes() {\n    const response = await NotesService.index();\n\n    if (response.data.length >= 1) {\n      setNotes(response.data.reverse());\n      setCurrentNote(response.data[0]);\n    } else {\n      setNotes([]);\n    }\n  }\n\n  const createNote = async () => {\n    await NotesService.create();\n    fetchNotes();\n  };\n\n  const deleteNote = async note => {\n    await NotesService.delete(note._id);\n    fetchNotes();\n  };\n\n  const updateNote = async (oldNote, params) => {\n    const updatedNote = await NotesService.update(oldNote._id, params);\n    const index = notes.indexOf(oldNote);\n    const newNotes = notes;\n    newNotes[index] = updatedNote.data;\n    setNotes(newNotes);\n    setCurrentNote(updatedNote.data);\n  };\n\n  const searchNotes = async query => {\n    const response = await NotesService.search(query);\n    setNotes(response.data);\n  };\n\n  const selectNote = id => {\n    const note = notes.find(note => {\n      return note._id == id;\n    });\n    setCurrentNote(note);\n  };\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Column.Group, {\n      className: \"notes\",\n      id: \"notes\",\n      children: [/*#__PURE__*/_jsxDEV(Menu, {\n        pageWrapId: \"notes-editor\",\n        isOpen: props.isOpen,\n        onStateChange: state => props.setIsOpen(state.isOpen),\n        disableAutoFocus: true,\n        outerContainerId: \"notes\",\n        customBurgerIcon: false,\n        customCrossIcon: false,\n        children: [/*#__PURE__*/_jsxDEV(Column.Group, {\n          children: /*#__PURE__*/_jsxDEV(Column, {\n            size: 10,\n            offset: 1,\n            children: /*#__PURE__*/_jsxDEV(Search, {\n              searchNotes: searchNotes,\n              fetchNotes: fetchNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          notes: notes,\n          selectNote: selectNote,\n          current_note: current_note,\n          deleteNote: deleteNote,\n          createNote: createNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        size: 12,\n        className: \"notes-editor\",\n        id: \"notes-editor\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          note: current_note,\n          updateNote: updateNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Notes, \"EGRBH0YG/KxrdYJu4/WeV9xm4Xo=\");\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/guilherme/workfolder/Evernote2/jsnotes-client/src/components/notes/index.js"],"names":["React","Fragment","useEffect","useState","Column","Button","push","Menu","List","NotesService","Editor","Search","Notes","props","notes","setNotes","current_note","setCurrentNote","title","body","id","fetchNotes","response","index","data","length","reverse","createNote","create","deleteNote","note","delete","_id","updateNote","oldNote","params","updatedNote","update","indexOf","newNotes","searchNotes","query","search","selectNote","find","isOpen","state","setIsOpen"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { Column, Button } from \"rbx\";\nimport \"../../styles/notes.scss\";\nimport { push as Menu } from 'react-burger-menu';\nimport List from \"../../components/notes/list\";\nimport NotesService from '../../services/notes';\nimport Editor from \"../notes/editor\";\nimport Search from '../notes/search';\n\n\nfunction Notes(props) {\n  const [notes, setNotes] = useState([]);\n  const [current_note, setCurrentNote] = useState({ title: \"\", body: \"\", id: \"\" });\n\n  async function fetchNotes() {\n    const response = await NotesService.index();\n    if (response.data.length >= 1) {\n      setNotes(response.data.reverse())\n      setCurrentNote(response.data[0])\n    } else {\n      setNotes([]);\n    }\n  }\n\n  const createNote = async () => {\n    await NotesService.create();\n    fetchNotes();\n  }\n\n  const deleteNote = async (note) => {\n    await NotesService.delete(note._id);\n    fetchNotes();\n  }\n\n  const updateNote = async (oldNote, params) => {\n    const updatedNote = await NotesService.update(oldNote._id, params);\n    const index = notes.indexOf(oldNote);\n    const newNotes = notes;\n    newNotes[index] = updatedNote.data;\n    setNotes(newNotes);\n    setCurrentNote(updatedNote.data);\n  }\n\n  const searchNotes = async (query) => {\n    const response = await NotesService.search(query);\n    setNotes(response.data);\n  }\n\n  const selectNote = (id) => {\n    const note = notes.find((note) => {\n      return note._id == id;\n    })\n    setCurrentNote(note);\n  }\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  return (\n    <Fragment>\n      <Column.Group className=\"notes\" id=\"notes\">\n        <Menu\n          pageWrapId={\"notes-editor\"}\n          isOpen={props.isOpen}\n          onStateChange={(state) => props.setIsOpen(state.isOpen)}\n          disableAutoFocus\n          outerContainerId={\"notes\"}\n          customBurgerIcon={false}\n          customCrossIcon={false}\n        >\n          <Column.Group>\n            <Column size={10} offset={1}>\n              <Search searchNotes={searchNotes} fetchNotes={fetchNotes}/>\n            </Column>\n          </Column.Group>\n          <List\n            notes={notes}\n            selectNote={selectNote}\n            current_note={current_note} \n            deleteNote={deleteNote}\n            createNote={createNote}/>\n        </Menu>\n\n\n        <Column size={12} className=\"notes-editor\" id=\"notes-editor\">\n          <Editor \n            note={current_note}\n            updateNote={updateNote}  \n          />\n        </Column>\n      </Column.Group>\n    </Fragment>\n  )\n}\n\nexport default Notes;"]},"metadata":{},"sourceType":"module"}